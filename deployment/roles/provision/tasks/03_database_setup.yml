- name: install postgres
  become: yes
  apt:
    name:
      - postgresql-client-12
      - postgresql-12
      - postgresql-contrib
      - libpq-dev
      - python3-pip
    state: latest

- name: install python dependencies
  become: yes
  pip:
    name:
      - psycopg2
      - virtualenv

- name: Ensure PostgreSQL data directory exists.
  file:
    path: "{{ db_directory }}"
    owner: "postgres"
    state: directory
    mode: 0700

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ db_directory }}/PG_VERSION"
  register: pgdata_dir_version

- name: Ensure PostgreSQL database is initialized.
  command: "/usr/lib/postgresql/12/bin/initdb -D {{ db_directory }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "postgres"

- name: Start and enable postgres
  service:
    name: postgresql
    enabled: yes
    state: started

- name: Create django database
  postgresql_db:
    name: "{{ django_db }}"
  become_user: postgres
  become: yes

- name: Create legacy database
  postgresql_db:
    name: "{{ legacy_db }}"
  become_user: postgres
  become: yes

- name: Create legacy database
  postgresql_db:
    name: "{{ user_name }}"
  become_user: postgres
  become: yes

- name: Create a new schema for legacy_latein in database
  postgresql_schema:
    db: "{{ legacy_db }}"
    name: di_sueb_latein
  become_user: postgres
  become: yes


- name: Configure a new postgresql user for the django db
  postgresql_user:
    db: "{{ django_db }}"
    name: "{{ django_db_user }}"
    password: "{{ django_db_password }}"
    priv: ALL
    role_attr_flags: NOSUPERUSER
  become: yes
  become_user: postgres
  notify:
  - restart postgres

- name: Configure a new postgresql user for the django db
  postgresql_user:
    db: "{{ legacy_db }}"
    name: "{{ legacy_db_user }}"
    password: "{{ legacy_db_password }}"
    priv: ALL
    role_attr_flags: NOSUPERUSER
  become: yes
  become_user: postgres
  notify:
  - restart postgres

- name: Set permissions for latein schema
  postgresql_privs:
    db: "{{ legacy_db }}"
    privs: ALL
    type: schema
    objs: di_sueb_latein
    role: "{{ legacy_db_user }}"
  become: yes
  become_user: postgres
  notify:
  - restart postgres

- name: Configure a new postgresql management user
  postgresql_user:
    name: "{{ user_name }}"
    password: "{{ user_password }}"
    role_attr_flags: SUPERUSER
  become: yes
  become_user: postgres
  notify:
  - restart postgres

