# Generated by Django 3.0.5 on 2020-07-09 21:55


from django.db import migrations


def load_original(apps, schema_editor):
    Legacy_Original = apps.get_model("hueb_legacy_latein", "OriginalNew")
    Legacy_Translation = apps.get_model("hueb_legacy_latein", "TranslationNew")
    Document = apps.get_model("hueb20", "Document")
    Person = apps.get_model("hueb20", "Person")
    Language = apps.get_model("hueb20", "Language")
    Country = apps.get_model("hueb20", "Country")
    Ddc = apps.get_model("hueb20", "DdcGerman")

    models = [Legacy_Original, Legacy_Translation]
    for Model in models:
        for legacy in Model.objects.all():
            new_document = Document()

            if type(legacy) == Legacy_Original:
                new_document.original_ref = legacy
            else:
                new_document.translation_ref = legacy

            new_document.app = "hueb_legacy_latein"

            if legacy.language:
                language = Language.objects.get(language_ref=legacy.language.id)
                new_document.language = language

            if legacy.country_id and legacy.country_id != 0:
                country = Country.objects.get(country_ref=legacy.country.id)
                new_document.country = country

            if legacy.ddc_id:
                ddc = Ddc.objects.get(ddc_ref=legacy.ddc.id)
                new_document.ddc = ddc

            new_document.title = legacy.title
            new_document.subtitle = str(legacy.subtitle) + "\n" + str(legacy.subtitle1)
            new_document.edition = legacy.edition
            new_document.real_year = legacy.real_year
            new_document.year = legacy.year
            new_document.save()

            publisher = Person()

            if type(legacy) == Legacy_Original:
                publisher.publisherOriginal_ref = legacy
            else:
                publisher.publisherTranslation_ref = legacy

            publisher.publisher_ref = legacy
            publisher.app = "hueb_legacy_latein"
            publisher.save()

            if type(legacy) == Legacy_Original:
                legacy_author_ids = legacy.author_new.values_list("id", flat=True)
                authors = Person.objects.filter(author_ref__in=legacy_author_ids)
                new_document.written_by.set(authors)
            else:
                legacy_translator_ids = legacy.translator_new.values_list(
                    "id", flat=True
                )
                translators = Person.objects.filter(
                    translator_ref__in=legacy_translator_ids
                )
                new_document.written_by.set(translators)

            new_document.publishers.add(publisher)
            new_document.published_location = legacy.published_location

            new_document.save()


def unload_original(apps, schema_editor):
    Document = apps.get_model("hueb20", "Document")
    Document.objects.filter(app="hueb_legacy_latein").delete()

    Person = apps.get_model("hueb20", "Person")
    Person.objects.filter(app="hueb_legacy_latein").filter(
        publisherOriginal_ref__isnull=False
    ).delete()

    Person.objects.filter(app="hueb_legacy_latein").filter(
        publisherTranslation_ref__isnull=False
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("hueb20", "0011_load_language"),
        ("hueb_legacy_latein", "0005_auto_20200709_2025"),
    ]

    operations = [migrations.RunPython(load_original, unload_original)]
